// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Thang.IDP.DbContexts;

#nullable disable

namespace Thang.IDP.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    partial class IdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Thang.IDP.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("SecurityCodeExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserRoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Subject")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Active = true,
                            ConcurrencyStamp = "8abe4c23-7894-450a-9eaf-25c4558dc8b3",
                            Email = "david@someprovider.com",
                            Password = "AQAAAAIAAYagAAAAEA2UtwPl2ClVXS2GxZAimtkI1J9LDURK7V5VUi/jjwSl3DA7ILndLMPYR5JxVKJDxQ==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "d860efca-22d9-47fd-8249-791ba61b07c7",
                            UserName = "David",
                            UserRoleId = new Guid("d65cf2bd-3840-41d3-af42-f7ff1a7122ef")
                        },
                        new
                        {
                            Id = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Active = true,
                            ConcurrencyStamp = "7d1c0040-a124-4eb1-84bf-df6f5f118863",
                            Email = "emma@someprovider.com",
                            Password = "AQAAAAIAAYagAAAAEA2UtwPl2ClVXS2GxZAimtkI1J9LDURK7V5VUi/jjwSl3DA7ILndLMPYR5JxVKJDxQ==",
                            SecurityCodeExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Subject = "b7539694-97e7-4dfe-84da-b4256e1ff5c7",
                            UserName = "Emma",
                            UserRoleId = new Guid("d7ab6668-2af4-4ea4-a93b-3d96dc475d8e")
                        });
                });

            modelBuilder.Entity("Thang.IDP.Entities.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5b2859b-0893-4952-8188-e2d7f1c31330"),
                            ConcurrencyStamp = "1606a068-cce0-4fbf-b6dd-87843af68fec",
                            Type = "given_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "David"
                        },
                        new
                        {
                            Id = new Guid("65e9a6c4-33e1-44bc-872c-9588fcddb8ec"),
                            ConcurrencyStamp = "94b4af66-c14f-419d-a1d5-fbd77eb9faee",
                            Type = "email",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "david@someprovider.com"
                        },
                        new
                        {
                            Id = new Guid("7cde2c6a-1996-4179-bee9-713aae6b5da1"),
                            ConcurrencyStamp = "a3ab6263-8958-44b3-8bda-5d973f808ecd",
                            Type = "family_name",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("badde062-0d2e-4e67-84b2-33cd997acbca"),
                            ConcurrencyStamp = "9783c759-2486-4e19-bd02-78a64c42c01f",
                            Type = "country",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "nl"
                        },
                        new
                        {
                            Id = new Guid("9b842d95-8cf8-4374-b8bc-4b99b4e7fd6e"),
                            ConcurrencyStamp = "af71e890-82b7-4bb2-9d8d-f25af5193899",
                            Type = "role",
                            UserId = new Guid("13229d33-99e0-41b3-b18d-4f72127e3971"),
                            Value = "Admin"
                        },
                        new
                        {
                            Id = new Guid("a6017373-fe89-429c-bb36-77399a88c3b7"),
                            ConcurrencyStamp = "25690a42-d814-483e-9852-d2590f1b1c63",
                            Type = "email",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "emma@someprovider.com"
                        },
                        new
                        {
                            Id = new Guid("8095faee-0fdb-47f4-86c6-0ae03cc946f4"),
                            ConcurrencyStamp = "de85dc9d-e66b-45e5-a1e6-0c24d9782855",
                            Type = "given_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Emma"
                        },
                        new
                        {
                            Id = new Guid("7f43601b-b696-46f4-ad61-027a45b38484"),
                            ConcurrencyStamp = "1a66b6ef-9eea-4f0b-8091-888748086634",
                            Type = "family_name",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "Flagg"
                        },
                        new
                        {
                            Id = new Guid("5082b6d2-3383-4138-b0bc-5599974b436c"),
                            ConcurrencyStamp = "8a141208-44e0-4bf4-815b-e7a0fb03887f",
                            Type = "country",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "be"
                        },
                        new
                        {
                            Id = new Guid("c158d545-c6df-4747-99d8-71d8ebf36b4d"),
                            ConcurrencyStamp = "b531abfe-5444-433b-b419-093a611043b0",
                            Type = "role",
                            UserId = new Guid("96053525-f4a5-47ee-855e-0ea77fa6c55a"),
                            Value = "PayingUser"
                        });
                });

            modelBuilder.Entity("Thang.IDP.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProviderIdentityKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Thang.IDP.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1069eee8-509a-46f9-9800-da3d0e12d560"),
                            ConcurrencyStamp = "de940ab0-f1ba-49eb-bfcb-91639a25ee2a",
                            Value = "FreeUser"
                        },
                        new
                        {
                            Id = new Guid("d7ab6668-2af4-4ea4-a93b-3d96dc475d8e"),
                            ConcurrencyStamp = "1c93bbe6-5654-40bf-9854-c9246eb52a94",
                            Value = "PayingUser"
                        },
                        new
                        {
                            Id = new Guid("d65cf2bd-3840-41d3-af42-f7ff1a7122ef"),
                            ConcurrencyStamp = "eb53a067-1fbf-470a-8023-b8b67697bc39",
                            Value = "Admin"
                        });
                });

            modelBuilder.Entity("Thang.IDP.Entities.UserSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSecrets");
                });

            modelBuilder.Entity("Thang.IDP.Entities.User", b =>
                {
                    b.HasOne("Thang.IDP.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Thang.IDP.Entities.UserClaim", b =>
                {
                    b.HasOne("Thang.IDP.Entities.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thang.IDP.Entities.UserLogin", b =>
                {
                    b.HasOne("Thang.IDP.Entities.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thang.IDP.Entities.UserSecret", b =>
                {
                    b.HasOne("Thang.IDP.Entities.User", "User")
                        .WithMany("Secrets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Thang.IDP.Entities.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Secrets");
                });
#pragma warning restore 612, 618
        }
    }
}
